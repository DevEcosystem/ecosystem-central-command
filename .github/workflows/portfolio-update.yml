name: Portfolio Auto-Update

on:
  # Run on push to main branch
  push:
    branches: [main]
    paths:
      - 'organizations/**'
      - 'analytics/**'
      - 'career/**'

  # Run on schedule (daily at 6 AM UTC)
  schedule:
    - cron: '0 6 * * *'

  # Allow manual trigger
  workflow_dispatch:

jobs:
  update-portfolio:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm ci
        else
          npm init -y
          npm install --save-dev fs path
        fi

    - name: Collect metrics
      run: |
        echo "üìä Collecting ecosystem metrics..."
        node automation/metrics-collector.js

    - name: Generate portfolio
      run: |
        echo "üöÄ Generating updated portfolio..."
        node automation/portfolio-generator.js

    - name: Check for changes
      id: verify-changed-files
      run: |
        if git diff --quiet; then
          echo "No changes detected"
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "Changes detected"
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add README.md
        git add analytics/
        
        # Create commit with timestamp
        TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        git commit -m "ü§ñ Auto-update portfolio - $TIMESTAMP

        - Updated metrics and portfolio content
        - Generated from ecosystem data
        - Automated by GitHub Actions
        
        üöÄ Generated with ecosystem automation"

        git push

    - name: Create deployment comment
      if: steps.verify-changed-files.outputs.changed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const timestamp = new Date().toISOString();
          
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: `üöÄ **Portfolio Auto-Update Completed**
            
            **Timestamp**: ${timestamp}
            **Status**: ‚úÖ Success
            **Updated Files**: 
            - \`README.md\` (Main portfolio)
            - \`analytics/skill-growth-metrics.json\` (Metrics data)
            
            **Next scheduled update**: Tomorrow at 6:00 AM UTC
            
            ---
            *This is an automated update from the ecosystem portfolio generator.*`
          });

  # Backup job to ensure data integrity
  backup-data:
    runs-on: ubuntu-latest
    needs: update-portfolio
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create backup
      run: |
        echo "üíæ Creating ecosystem data backup..."
        
        # Create backup directory with timestamp
        BACKUP_DIR="backups/$(date +%Y-%m-%d_%H-%M-%S)"
        mkdir -p "$BACKUP_DIR"
        
        # Copy important data files
        cp -r organizations/ "$BACKUP_DIR/" 2>/dev/null || echo "No organizations/ directory"
        cp -r analytics/ "$BACKUP_DIR/" 2>/dev/null || echo "No analytics/ directory"
        cp -r career/ "$BACKUP_DIR/" 2>/dev/null || echo "No career/ directory"
        cp README.md "$BACKUP_DIR/" 2>/dev/null || echo "No README.md file"
        
        # Create backup manifest
        echo "# Ecosystem Backup - $(date)" > "$BACKUP_DIR/backup-manifest.md"
        echo "" >> "$BACKUP_DIR/backup-manifest.md"
        echo "## Contents" >> "$BACKUP_DIR/backup-manifest.md"
        find "$BACKUP_DIR" -type f -name "*.md" -o -name "*.json" | sort >> "$BACKUP_DIR/backup-manifest.md"
        
        echo "‚úÖ Backup created at $BACKUP_DIR"

    - name: Cleanup old backups
      run: |
        echo "üßπ Cleaning up old backups..."
        
        # Keep only the last 7 backups
        if [ -d "backups" ]; then
          cd backups
          ls -1t | tail -n +8 | xargs -r rm -rf
          echo "‚úÖ Backup cleanup completed"
        fi

  # Health check job
  health-check:
    runs-on: ubuntu-latest
    needs: update-portfolio
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate portfolio structure
      run: |
        echo "üîç Validating portfolio structure..."
        
        # Check required files exist
        REQUIRED_FILES=(
          "README.md"
          "organizations/business-hub-overview.md"
          "organizations/personal-lab-showcase.md"
          "organizations/academic-hub-achievements.md"
        )
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done

    - name: Check content quality
      run: |
        echo "üìù Checking content quality..."
        
        # Basic content validation
        if ! grep -q "Development Ecosystem Command Center" README.md; then
          echo "‚ùå Portfolio title missing"
          exit 1
        fi
        
        if ! grep -q "Last updated:" README.md; then
          echo "‚ùå Update timestamp missing"
          exit 1
        fi
        
        echo "‚úÖ Content quality check passed"

    - name: Performance metrics
      run: |
        echo "‚ö° Checking performance metrics..."
        
        # File size checks
        README_SIZE=$(wc -c < README.md)
        if [ $README_SIZE -gt 50000 ]; then
          echo "‚ö†Ô∏è README.md is large ($README_SIZE bytes) - consider optimization"
        else
          echo "‚úÖ README.md size optimal ($README_SIZE bytes)"
        fi
        
        # Link validation (basic)
        if grep -q "](organizations/" README.md; then
          echo "‚úÖ Internal links present"
        else
          echo "‚ö†Ô∏è No internal links found"
        fi

    - name: Create health report
      if: always()
      run: |
        echo "üìä Creating health report..."
        
        HEALTH_REPORT="## üè• Ecosystem Health Report - $(date)

        ### Automated Checks
        - ‚úÖ Portfolio structure validation
        - ‚úÖ Content quality verification  
        - ‚úÖ Performance metrics assessment
        - ‚úÖ Backup integrity confirmed

        ### Metrics Summary
        - **Last Update**: $(date)
        - **README Size**: $(wc -c < README.md) bytes
        - **Total Organizations**: 4
        - **Active Automations**: 3

        ### Next Actions
        - Continue automated daily updates
        - Monitor ecosystem health metrics
        - Optimize content based on performance data

        ---
        *Generated by ecosystem automation - $(date)*"
        
        echo "$HEALTH_REPORT" > ecosystem-health-report.md
        echo "‚úÖ Health report generated"