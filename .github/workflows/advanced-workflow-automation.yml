name: üîÑ Advanced Workflow Automation

on:
  workflow_dispatch:
    inputs:
      automation_type:
        description: 'Type of automation to run'
        required: true
        type: choice
        options:
          - smart-branch
          - coordinated-pr
          - cross-repo-sync
          - conflict-detection
      issue_number:
        description: 'Issue number (for smart branch creation)'
        required: false
        type: string
      target_repos:
        description: 'Target repositories (comma-separated)'
        required: false
        type: string
  
  issues:
    types: [opened, labeled]

jobs:
  smart-branch-automation:
    if: |
      github.event_name == 'issues' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.automation_type == 'smart-branch')
    runs-on: ubuntu-latest
    name: Smart Branch Creation
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'devflow-orchestrator/package*.json'
          
      - name: Install dependencies
        run: |
          cd devflow-orchestrator
          npm ci
          
      - name: Create smart branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { WorkflowOrchestrator } = await import('${{ github.workspace }}/devflow-orchestrator/core/workflow-orchestrator.js');
            
            // Determine issue number
            let issueNumber;
            if (context.eventName === 'issues') {
              issueNumber = context.payload.issue.number;
            } else {
              issueNumber = context.payload.inputs.issue_number;
            }
            
            if (!issueNumber) {
              core.setFailed('Issue number is required');
              return;
            }
            
            // Get issue details
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber)
            });
            
            // Initialize orchestrator
            const orchestrator = new WorkflowOrchestrator({
              github: github,
              enableSmartBranching: true,
              enableAutoPR: true
            });
            
            // Create smart branch
            try {
              const result = await orchestrator.createSmartBranch(issue.data, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                applyProtection: true,
                createPR: false // Don't auto-create PR yet
              });
              
              console.log('Smart branch created:', result);
              
              // Set outputs
              core.setOutput('branch_name', result.name);
              core.setOutput('branch_type', result.type);
              core.setOutput('branch_url', result.result.url);
              
              // Add comment to issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumber),
                body: `üåø Smart branch created: \`${result.name}\`\n\nBranch type: **${result.type}**\nView branch: ${result.result.url}`
              });
              
            } catch (error) {
              core.setFailed(`Failed to create smart branch: ${error.message}`);
            }

  conflict-detection:
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.automation_type == 'conflict-detection'
    runs-on: ubuntu-latest
    name: Predictive Conflict Detection
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'devflow-orchestrator/package*.json'
          
      - name: Install dependencies
        run: |
          cd devflow-orchestrator
          npm ci
          
      - name: Detect conflicts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { WorkflowOrchestrator } = await import('${{ github.workspace }}/devflow-orchestrator/core/workflow-orchestrator.js');
            
            const orchestrator = new WorkflowOrchestrator({
              github: github,
              enableConflictDetection: true
            });
            
            // Get all open PRs
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            console.log(`Checking ${prs.data.length} open PRs for conflicts...`);
            
            const conflictResults = [];
            
            for (const pr of prs.data) {
              try {
                const result = await orchestrator.detectConflicts(
                  { name: pr.head.ref },
                  pr.base.ref,
                  {
                    owner: context.repo.owner,
                    repo: context.repo.repo
                  }
                );
                
                if (result.hasConflicts) {
                  conflictResults.push({
                    pr: pr.number,
                    branch: pr.head.ref,
                    conflicts: result.conflicts
                  });
                }
              } catch (error) {
                console.error(`Error checking PR #${pr.number}:`, error.message);
              }
            }
            
            // Generate report
            if (conflictResults.length > 0) {
              const report = conflictResults.map(r => 
                `- PR #${r.pr} (${r.branch}): ${r.conflicts.length} potential conflicts`
              ).join('\n');
              
              core.warning(`Potential conflicts detected in ${conflictResults.length} PRs:\n${report}`);
            } else {
              console.log('No potential conflicts detected');
            }

  cross-repo-coordination:
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.automation_type == 'cross-repo-sync'
    runs-on: ubuntu-latest
    name: Cross-Repository Coordination
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'devflow-orchestrator/package*.json'
          
      - name: Install dependencies
        run: |
          cd devflow-orchestrator
          npm ci
          
      - name: Coordinate across repositories
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { CrossRepoCoordinator } = await import('${{ github.workspace }}/devflow-orchestrator/core/cross-repo-coordinator.js');
            
            const coordinator = new CrossRepoCoordinator({
              github: github,
              enableDependencyTracking: true,
              enableAutoSync: false
            });
            
            // Parse target repositories
            const targetRepos = context.payload.inputs.target_repos
              ? context.payload.inputs.target_repos.split(',').map(r => r.trim())
              : [];
            
            if (targetRepos.length === 0) {
              core.setFailed('Target repositories are required');
              return;
            }
            
            console.log(`Coordinating across ${targetRepos.length} repositories`);
            
            // Register repositories
            for (const repoPath of targetRepos) {
              const [owner, name] = repoPath.split('/');
              try {
                await coordinator.registerRepository({
                  owner,
                  name,
                  role: 'standard'
                });
              } catch (error) {
                core.warning(`Failed to register ${repoPath}: ${error.message}`);
              }
            }
            
            // Create coordinated branch
            const branchConfig = {
              name: `sync-${context.runId}`,
              baseBranch: 'main',
              continueOnError: true
            };
            
            const result = await coordinator.createCoordinatedBranch(branchConfig);
            
            console.log('Coordination results:', JSON.stringify(result, null, 2));
            
            // Create summary
            const summary = `## Cross-Repository Coordination Results
            
            Branch: \`${result.branchName}\`
            
            ### Created (${result.created.length})
            ${result.created.map(r => `- ‚úÖ ${r.repository}`).join('\n')}
            
            ### Failed (${result.failed.length})
            ${result.failed.map(r => `- ‚ùå ${r.repository}: ${r.error}`).join('\n')}
            
            ### Skipped (${result.skipped.length})
            ${result.skipped.map(r => `- ‚è≠Ô∏è ${r.repository}: ${r.reason}`).join('\n')}
            `;
            
            await core.summary.addRaw(summary).write();

  generate-workflow-template:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    name: Generate Custom Workflow Template
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Generate workflow
        uses: actions/github-script@v7
        with:
          script: |
            const workflowType = context.payload.inputs.automation_type;
            const timestamp = new Date().toISOString().split('T')[0];
            
            // Example: Generate a summary of available automations
            const summary = `## üîÑ Advanced Workflow Automation
            
            ### Available Automations
            
            1. **Smart Branch Creation**
               - Automatically creates branches based on issue labels
               - Applies appropriate protection rules
               - Links to source issue
            
            2. **Conflict Detection**
               - Predictively detects potential merge conflicts
               - Analyzes file changes across PRs
               - Provides early warning
            
            3. **Cross-Repository Synchronization**
               - Coordinates changes across multiple repositories
               - Manages dependencies
               - Ensures consistency
            
            ### Triggered By
            - Workflow: ${context.workflow}
            - Event: ${context.eventName}
            - Actor: ${context.actor}
            - Run ID: ${context.runId}
            
            ### Next Steps
            Use the workflow dispatch to trigger specific automations with required parameters.
            `;
            
            await core.summary.addRaw(summary).write();