# Branch Synchronization Workflow
# Automatically syncs feature branches with main to prevent conflicts

name: Branch Synchronization

on:
  # Only manual trigger for safety
  workflow_dispatch:
    inputs:
      sync_all:
        description: 'Sync all feature branches'
        required: false
        default: 'false'
        type: boolean
      target_branch:
        description: 'Specific branch to sync (optional)'
        required: false
        type: string
  # Optional: notify about sync opportunities
  schedule:
    # Check for sync opportunities daily at 9 AM JST
    - cron: '0 0 * * *'

jobs:
  check-sync-opportunities:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check branches needing sync
        id: branch_check
        run: |
          echo "## üîÑ Branch Sync Status Report" >> $GITHUB_STEP_SUMMARY
          echo "Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count orphaned branches
          ORPHANED_COUNT=0
          
          # Get all local branches from recent commits
          git fetch --all
          LOCAL_BRANCHES=$(git for-each-ref --format='%(refname:short)' refs/heads/)
          REMOTE_BRANCHES=$(git for-each-ref --format='%(refname:short)' refs/remotes/origin/ | sed 's/origin\///')
          
          echo "### üßπ Orphaned Local Branches (deleted on remote):" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for branch in $LOCAL_BRANCHES; do
            if [[ "$branch" != "main" && "$branch" != "develop" && "$branch" != "staging" ]]; then
              if ! echo "$REMOTE_BRANCHES" | grep -q "^$branch$"; then
                echo "- ‚ö†Ô∏è **$branch** - exists locally but deleted on remote" >> $GITHUB_STEP_SUMMARY
                ((ORPHANED_COUNT++))
              fi
            fi
          done
          
          if [ $ORPHANED_COUNT -eq 0 ]; then
            echo "‚úÖ No orphaned branches found" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üîß Cleanup Recommended:" >> $GITHUB_STEP_SUMMARY
            echo "Run \`./scripts/branch-cleanup.sh check\` locally to review these branches." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get all feature branches
          BRANCHES=$(git branch -r | grep -E 'origin/feature/' | grep -v 'origin/HEAD' | sed 's/origin\///')
          
          if [ -z "$BRANCHES" ]; then
            echo "### Feature Branches Status:" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ No active feature branches found" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Feature Branches Status:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            git fetch origin main
            
            for branch in $BRANCHES; do
              BEHIND=$(git rev-list --count $branch..origin/main 2>/dev/null || echo "unknown")
              if [ "$BEHIND" != "unknown" ] && [ "$BEHIND" -gt 0 ]; then
                echo "‚ö†Ô∏è **$branch** - $BEHIND commits behind main" >> $GITHUB_STEP_SUMMARY
              else
                echo "‚úÖ **$branch** - up to date" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Manual Sync Options:" >> $GITHUB_STEP_SUMMARY
          echo "- Branch cleanup: \`./scripts/branch-cleanup.sh interactive\`" >> $GITHUB_STEP_SUMMARY
          echo "- Use VS Code: Run task 'DevFlow: Branch Cleanup Check'" >> $GITHUB_STEP_SUMMARY
          echo "- Use GitHub: Go to Actions ‚Üí Branch Synchronization ‚Üí Run workflow" >> $GITHUB_STEP_SUMMARY
          
          # Set output for notification
          echo "orphaned_count=$ORPHANED_COUNT" >> $GITHUB_OUTPUT

      - name: Create issue if cleanup needed
        if: steps.branch_check.outputs.orphaned_count > 0
        uses: actions/github-script@v7
        with:
          script: |
            const orphanedCount = ${{ steps.branch_check.outputs.orphaned_count }};
            const date = new Date().toISOString().split('T')[0];
            
            // Check if weekly cleanup issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'branch-cleanup',
              state: 'open'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Weekly Branch Cleanup') && 
              issue.created_at.startsWith(date)
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üßπ Weekly Branch Cleanup Reminder - ${date}`,
                body: `## Branch Cleanup Needed
                
${orphanedCount} orphaned local branches detected that have been deleted on remote.

### Action Required
1. Run \`./scripts/branch-cleanup.sh check\` to review branches
2. Run \`./scripts/branch-cleanup.sh interactive\` for cleanup
3. Or use VS Code: **Cmd+Shift+P** ‚Üí "Tasks: Run Task" ‚Üí "DevFlow: Branch Cleanup Check"

### Why Cleanup?
- Reduces clutter in branch listings
- Prevents accidental work on deleted branches
- Keeps repository organized

This issue will auto-close in 7 days.`,
                labels: ['branch-cleanup', 'üîß devops', 'üßπ maintenance']
              });
            }

  sync-feature-branches:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.repository == 'DevEcosystem/ecosystem-central-command'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "DevFlow Bot"
          git config --global user.email "devflow-bot@noreply.github.com"

      - name: Get all feature branches
        id: branches
        run: |
          # Get all remote feature branches
          BRANCHES=$(git branch -r | grep -E 'origin/feature/' | grep -v 'origin/HEAD' | sed 's/origin\///' | tr '\n' ' ')
          echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
          echo "Found branches: $BRANCHES"

      - name: Sync feature branches with main
        if: steps.branches.outputs.branches != '' && (github.event.inputs.sync_all == 'true' || github.event.inputs.target_branch != '')
        run: |
          set -e
          
          echo "üîÑ Starting manual branch synchronization..."
          echo "Target: ${{ github.event.inputs.target_branch || 'all branches' }}"
          
          # Ensure main is up to date
          git checkout main
          git pull origin main
          
          # Determine which branches to process
          if [ -n "${{ github.event.inputs.target_branch }}" ]; then
            BRANCHES_TO_SYNC="${{ github.event.inputs.target_branch }}"
          else
            BRANCHES_TO_SYNC="${{ steps.branches.outputs.branches }}"
          fi
          
          # Process each feature branch
          for branch in $BRANCHES_TO_SYNC; do
            if [[ "$branch" == feature/* ]]; then
              echo "üîÑ Processing branch: $branch"
              
              # Check if branch exists locally
              if git show-ref --verify --quiet refs/heads/$branch; then
                git branch -D $branch
              fi
              
              # Create local branch from remote
              git checkout -b $branch origin/$branch
              
              # Check if merge is needed
              BEHIND=$(git rev-list --count $branch..main)
              if [ "$BEHIND" -gt 0 ]; then
                echo "üìù Branch $branch is $BEHIND commits behind main. Attempting merge..."
                
                # Attempt to merge main
                if git merge main --no-edit; then
                  echo "‚úÖ Successfully merged main into $branch"
                  
                  # Push the updated branch
                  if git push origin $branch; then
                    echo "‚úÖ Successfully pushed updated $branch"
                  else
                    echo "‚ùå Failed to push $branch"
                  fi
                else
                  echo "‚ö†Ô∏è Merge conflict detected in $branch. Manual resolution required."
                  echo "Creating issue for manual intervention..."
                  
                  # Reset to clean state
                  git merge --abort || true
                  git checkout main
                  git branch -D $branch || true
                  
                  # Create issue for manual resolution
                  gh issue create \
                    --title "üîÑ Merge Conflict: $branch requires manual resolution" \
                    --body "Branch \`$branch\` has merge conflicts with \`main\` that require manual resolution.

## Conflict Details
- Branch: \`$branch\`
- Conflicted with: \`main\` 
- Detected: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

## Resolution Steps
1. \`git checkout $branch\`
2. \`git merge main\`
3. Resolve conflicts manually
4. \`git add .\`
5. \`git commit\`
6. \`git push origin $branch\`

## Automation
This issue was automatically created by the Branch Synchronization workflow." \
                    --label "üîÑ automation,‚ö†Ô∏è conflict-resolution,üîß devops" \
                    --assignee "@me" || echo "Failed to create issue"
                  
                  continue
                fi
              else
                echo "‚úÖ Branch $branch is up to date with main"
              fi
              
              # Return to main for next iteration
              git checkout main
            fi
          done
          
          echo "üéâ Branch synchronization completed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "## Branch Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "- üïê Executed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "- üåø Branches processed: ${{ steps.branches.outputs.branches }}" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Sync completed successfully" >> $GITHUB_STEP_SUMMARY