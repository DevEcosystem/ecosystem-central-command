# Branch Synchronization Workflow
# Automatically syncs feature branches with main to prevent conflicts

name: Branch Synchronization

on:
  # Only manual trigger for safety
  workflow_dispatch:
    inputs:
      sync_all:
        description: 'Sync all feature branches'
        required: false
        default: 'false'
        type: boolean
      target_branch:
        description: 'Specific branch to sync (optional)'
        required: false
        type: string
  # Optional: notify about sync opportunities
  schedule:
    # Check for sync opportunities daily at 9 AM JST
    - cron: '0 0 * * *'

jobs:
  check-sync-opportunities:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check branches needing sync
        run: |
          echo "## 🔄 Branch Sync Status Report" >> $GITHUB_STEP_SUMMARY
          echo "Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get all feature branches
          BRANCHES=$(git branch -r | grep -E 'origin/feature/' | grep -v 'origin/HEAD' | sed 's/origin\///')
          
          if [ -z "$BRANCHES" ]; then
            echo "✅ No feature branches found" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          echo "### Feature Branches Status:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          git fetch origin main
          
          for branch in $BRANCHES; do
            BEHIND=$(git rev-list --count $branch..origin/main 2>/dev/null || echo "unknown")
            if [ "$BEHIND" != "unknown" ] && [ "$BEHIND" -gt 0 ]; then
              echo "⚠️ **$branch** - $BEHIND commits behind main" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **$branch** - up to date" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Manual Sync Options:" >> $GITHUB_STEP_SUMMARY
          echo "- Use CLI: \`./scripts/branch-utils.sh sync_feature_branch\`" >> $GITHUB_STEP_SUMMARY
          echo "- Use VS Code: Run task 'DevFlow: Sync Feature Branch'" >> $GITHUB_STEP_SUMMARY
          echo "- Use GitHub: Go to Actions → Branch Synchronization → Run workflow" >> $GITHUB_STEP_SUMMARY

  sync-feature-branches:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.repository == 'DevEcosystem/ecosystem-central-command'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "DevFlow Bot"
          git config --global user.email "devflow-bot@noreply.github.com"

      - name: Get all feature branches
        id: branches
        run: |
          # Get all remote feature branches
          BRANCHES=$(git branch -r | grep -E 'origin/feature/' | grep -v 'origin/HEAD' | sed 's/origin\///' | tr '\n' ' ')
          echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
          echo "Found branches: $BRANCHES"

      - name: Sync feature branches with main
        if: steps.branches.outputs.branches != '' && (github.event.inputs.sync_all == 'true' || github.event.inputs.target_branch != '')
        run: |
          set -e
          
          echo "🔄 Starting manual branch synchronization..."
          echo "Target: ${{ github.event.inputs.target_branch || 'all branches' }}"
          
          # Ensure main is up to date
          git checkout main
          git pull origin main
          
          # Determine which branches to process
          if [ -n "${{ github.event.inputs.target_branch }}" ]; then
            BRANCHES_TO_SYNC="${{ github.event.inputs.target_branch }}"
          else
            BRANCHES_TO_SYNC="${{ steps.branches.outputs.branches }}"
          fi
          
          # Process each feature branch
          for branch in $BRANCHES_TO_SYNC; do
            if [[ "$branch" == feature/* ]]; then
              echo "🔄 Processing branch: $branch"
              
              # Check if branch exists locally
              if git show-ref --verify --quiet refs/heads/$branch; then
                git branch -D $branch
              fi
              
              # Create local branch from remote
              git checkout -b $branch origin/$branch
              
              # Check if merge is needed
              BEHIND=$(git rev-list --count $branch..main)
              if [ "$BEHIND" -gt 0 ]; then
                echo "📝 Branch $branch is $BEHIND commits behind main. Attempting merge..."
                
                # Attempt to merge main
                if git merge main --no-edit; then
                  echo "✅ Successfully merged main into $branch"
                  
                  # Push the updated branch
                  if git push origin $branch; then
                    echo "✅ Successfully pushed updated $branch"
                  else
                    echo "❌ Failed to push $branch"
                  fi
                else
                  echo "⚠️ Merge conflict detected in $branch. Manual resolution required."
                  echo "Creating issue for manual intervention..."
                  
                  # Reset to clean state
                  git merge --abort || true
                  git checkout main
                  git branch -D $branch || true
                  
                  # Create issue for manual resolution
                  gh issue create \
                    --title "🔄 Merge Conflict: $branch requires manual resolution" \
                    --body "Branch \`$branch\` has merge conflicts with \`main\` that require manual resolution.

## Conflict Details
- Branch: \`$branch\`
- Conflicted with: \`main\` 
- Detected: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

## Resolution Steps
1. \`git checkout $branch\`
2. \`git merge main\`
3. Resolve conflicts manually
4. \`git add .\`
5. \`git commit\`
6. \`git push origin $branch\`

## Automation
This issue was automatically created by the Branch Synchronization workflow." \
                    --label "🔄 automation,⚠️ conflict-resolution,🔧 devops" \
                    --assignee "@me" || echo "Failed to create issue"
                  
                  continue
                fi
              else
                echo "✅ Branch $branch is up to date with main"
              fi
              
              # Return to main for next iteration
              git checkout main
            fi
          done
          
          echo "🎉 Branch synchronization completed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "## Branch Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "- 🕐 Executed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "- 🌿 Branches processed: ${{ steps.branches.outputs.branches }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Sync completed successfully" >> $GITHUB_STEP_SUMMARY