#!/bin/bash

# Phase 2B Cross-Organizational Rollout Script
# Deploy enhanced READMEs to Academic, Business, and Ecosystem repositories

echo "🌐 Phase 2B Rollout: Cross-Organizational Deployment"
echo "==================================================="

if [ -z "$GITHUB_TOKEN" ]; then
    echo "❌ GITHUB_TOKEN not set. Please set it first:"
    echo "export GITHUB_TOKEN=\"your_token_here\""
    exit 1
fi

echo "✅ GitHub token is set"
echo ""

# Phase 2B repositories (cross-organizational)
repositories=(
    "academic-portfolio:DevAcademicHub"
    "business-management:DevBusinessHub"
    "automation-tools:DevBusinessHub"
    "ecosystem-automation-tools:DevEcosystem"
)

total_repos=${#repositories[@]}
success_count=0
failure_count=0

echo "📋 Phase 2B Cross-Organizational Deployment Plan:"
echo "🎓 DevAcademicHub/academic-portfolio - University education and academic achievement portfolio"
echo "🏢 DevBusinessHub/business-management - Client project management and business automation"
echo "🔧 DevBusinessHub/automation-tools - Business process automation and analysis tools"
echo "🤖 DevEcosystem/ecosystem-automation-tools - Automation tools and utilities for development ecosystem"
echo ""

for repo_entry in "${repositories[@]}"; do
    IFS=':' read -r repo_name org_name <<< "$repo_entry"
    
    echo "🎯 Deploying to $org_name/$repo_name..."
    echo "================================================"
    
    # Check if generated README exists
    readme_file="/Users/Mea/code/github-ecosystem/ecosystem-central-command/generated-readmes/${repo_name}-README.md"
    
    if [ ! -f "$readme_file" ]; then
        echo "❌ Generated README not found: $readme_file"
        ((failure_count++))
        echo ""
        continue
    fi
    
    echo "✅ README file found ($(wc -c < "$readme_file") characters)"
    
    # Get current README SHA
    echo "🔍 Getting current README information..."
    current_readme_response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
        "https://api.github.com/repos/$org_name/$repo_name/contents/README.md")
    
    # Check if repository exists and is accessible
    if echo "$current_readme_response" | grep -q '"message.*Not Found"'; then
        echo "❌ Repository not found or not accessible: $org_name/$repo_name"
        echo "   This might be because the repository doesn't exist or token lacks access"
        ((failure_count++))
        echo ""
        continue
    fi
    
    sha=$(echo "$current_readme_response" | grep '"sha"' | head -1 | sed 's/.*"sha": *"\([^"]*\)".*/\1/')
    
    if [ -z "$sha" ]; then
        echo "📝 No existing README found - will create new one"
        sha_param=""
    else
        echo "✅ Found existing README (SHA: ${sha:0:7}...)"
        sha_param=", \"sha\": \"$sha\""
    fi
    
    # Encode content to base64
    echo "🔄 Encoding content for GitHub API..."
    encoded_content=$(base64 -i "$readme_file" | tr -d '\n')
    
    # Create repository-specific commit message
    case $repo_name in
        "academic-portfolio")
            commit_msg="🎓 Phase 2B: Deploy enhanced academic portfolio README\\n\\n✨ Enhanced with:\\n- Comprehensive academic overview\\n- University education highlights\\n- Research and achievement showcase\\n- Professional academic presentation\\n\\n🤖 Auto-generated by Universal README Management"
            ;;
        "business-management")
            commit_msg="🏢 Phase 2B: Deploy enhanced business management README\\n\\n✨ Enhanced with:\\n- Comprehensive business overview\\n- Client-centric operations framework\\n- Professional service presentation\\n- Operational excellence showcase\\n\\n🤖 Auto-generated by Universal README Management"
            ;;
        "automation-tools")
            commit_msg="🔧 Phase 2B: Deploy enhanced automation tools README\\n\\n✨ Enhanced with:\\n- Comprehensive automation overview\\n- Business process optimization\\n- Tool and utility showcase\\n- Professional efficiency presentation\\n\\n🤖 Auto-generated by Universal README Management"
            ;;
        "ecosystem-automation-tools")
            commit_msg="🤖 Phase 2B: Deploy enhanced ecosystem automation README\\n\\n✨ Enhanced with:\\n- Comprehensive ecosystem overview\\n- Development automation showcase\\n- System integration presentation\\n- Technical infrastructure highlights\\n\\n🤖 Auto-generated by Universal README Management"
            ;;
        *)
            commit_msg="🚀 Phase 2B: Deploy enhanced README with Universal Management\\n\\n✨ Enhanced with comprehensive overview and professional presentation\\n\\n🤖 Auto-generated by Universal README Management"
            ;;
    esac
    
    # Create JSON payload
    echo "📝 Creating API payload..."
    cat > /tmp/github_payload_${repo_name}.json << EOF
{
  "message": "$commit_msg",
  "content": "$encoded_content"$sha_param
}
EOF
    
    echo "🚀 Deploying to GitHub..."
    
    # Deploy using curl
    response=$(curl -s -X PUT \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github.v3+json" \
        -H "Content-Type: application/json" \
        -d @/tmp/github_payload_${repo_name}.json \
        "https://api.github.com/repos/$org_name/$repo_name/contents/README.md")
    
    # Check if deployment was successful
    if echo "$response" | grep -q '"commit"'; then
        echo "✅ SUCCESS! README deployed to $org_name/$repo_name"
        echo "🌐 View at: https://github.com/$org_name/$repo_name"
        commit_sha=$(echo "$response" | grep '"sha"' | head -1 | sed 's/.*"sha": *"\([^"]*\)".*/\1/')
        echo "📊 Commit SHA: ${commit_sha:0:7}..."
        ((success_count++))
    else
        echo "❌ Deployment failed for $org_name/$repo_name"
        echo "Response: $response"
        ((failure_count++))
    fi
    
    # Clean up
    rm -f /tmp/github_payload_${repo_name}.json
    echo ""
    
    # Longer delay between cross-organizational deployments to respect API rate limits
    sleep 3
done

echo "📊 PHASE 2B CROSS-ORGANIZATIONAL ROLLOUT SUMMARY"
echo "==============================================="
echo "Total Repositories: $total_repos"
echo "✅ Successful Deployments: $success_count"
echo "❌ Failed Deployments: $failure_count"
echo ""

if [ $success_count -eq $total_repos ]; then
    echo "🎉 Phase 2B Rollout: COMPLETE SUCCESS!"
    echo "🌐 ENTIRE GITHUB ECOSYSTEM NOW ENHANCED!"
    echo "🚀 Universal README Management: FULLY OPERATIONAL"
    echo ""
    echo "🔗 Your complete enhanced ecosystem:"
    echo ""
    echo "👤 DevPersonalHub (Personal Development)"
    echo "- https://github.com/DevPersonalHub/external-learning-platforms"
    echo "- https://github.com/DevPersonalHub/portfolio-website"
    echo "- https://github.com/DevPersonalHub/technical-showcase"
    echo "- https://github.com/DevPersonalHub/learning-projects"
    echo ""
    echo "🎓 DevAcademicHub (Academic Excellence)"
    echo "- https://github.com/DevAcademicHub/academic-portfolio"
    echo ""
    echo "🏢 DevBusinessHub (Professional Operations)"
    echo "- https://github.com/DevBusinessHub/business-management"
    echo "- https://github.com/DevBusinessHub/automation-tools"
    echo ""
    echo "🤖 DevEcosystem (System Infrastructure)"
    echo "- https://github.com/DevEcosystem/ecosystem-automation-tools"
    echo ""
    echo "📈 IMPACT ACHIEVED:"
    echo "✅ 8 repositories across 4 organizations"
    echo "✅ Consistent professional presentation"
    echo "✅ Enhanced navigation and user experience"
    echo "✅ Automated maintenance and updates"
    echo "✅ Career, academic, and business value maximized"
    echo ""
    echo "🎯 NEXT: Set up daily automation for continuous updates!"
    
elif [ $success_count -gt 0 ]; then
    echo "⚠️ Phase 2B Rollout: PARTIAL SUCCESS"
    echo "📋 $success_count of $total_repos repositories successfully deployed"
    echo "🔍 Please review failed deployments - they may be due to:"
    echo "   - Repository access permissions"
    echo "   - Organization membership requirements"
    echo "   - Repository existence or naming differences"
    echo ""
    echo "✅ Successfully deployed repositories:"
    for repo_entry in "${repositories[@]}"; do
        IFS=':' read -r repo_name org_name <<< "$repo_entry"
        echo "- $org_name/$repo_name"
    done
else
    echo "❌ Phase 2B Rollout: DEPLOYMENT ISSUES"
    echo "🔍 All deployments failed - please check:"
    echo "   - GitHub token permissions and scopes"
    echo "   - Repository access and organization membership"
    echo "   - Network connectivity and API availability"
fi