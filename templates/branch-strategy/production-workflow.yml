name: 🏢 Production Grade Quality Check

on:
  pull_request:
    branches: 
      - main
      - staging
      - develop
      - production
  push:
    branches:
      - develop
      - staging

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'

jobs:
  quality-check:
    name: 🔍 Quality Assurance
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect language
        id: detect-language
        run: |
          if [ -f "package.json" ]; then
            echo "language=node" >> $GITHUB_OUTPUT
          elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
            echo "language=python" >> $GITHUB_OUTPUT
          else
            echo "language=unknown" >> $GITHUB_OUTPUT
          fi

      # Node.js workflow
      - name: 📦 Setup Node.js
        if: steps.detect-language.outputs.language == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies (Node.js)
        if: steps.detect-language.outputs.language == 'node'
        run: npm ci

      - name: 🎨 Lint code (Node.js)
        if: steps.detect-language.outputs.language == 'node'
        run: npm run lint || echo "::warning::Linting not configured"

      - name: 🔍 Type check (Node.js)
        if: steps.detect-language.outputs.language == 'node'
        run: npm run typecheck || npm run type-check || echo "::warning::Type checking not configured"

      - name: 🧪 Run tests (Node.js)
        if: steps.detect-language.outputs.language == 'node'
        run: npm test -- --passWithNoTests

      - name: 📊 Generate coverage (Node.js)
        if: steps.detect-language.outputs.language == 'node'
        run: npm run test:coverage || npm test -- --coverage --passWithNoTests
        continue-on-error: true

      # Python workflow
      - name: 🐍 Setup Python
        if: steps.detect-language.outputs.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies (Python)
        if: steps.detect-language.outputs.language == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || pip install -e .
          pip install ruff pytest pytest-cov

      - name: 🎨 Lint code (Python)
        if: steps.detect-language.outputs.language == 'python'
        run: ruff check . || echo "::warning::Linting issues found"

      - name: 🧪 Run tests (Python)
        if: steps.detect-language.outputs.language == 'python'
        run: pytest || echo "::warning::No tests found"

      - name: 📊 Generate coverage (Python)
        if: steps.detect-language.outputs.language == 'python'
        run: pytest --cov || echo "::warning::Coverage not configured"
        continue-on-error: true

  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: 📤 Upload security results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  build-test:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check for build script
        id: check-build
        run: |
          if [ -f "package.json" ] && grep -q '"build"' package.json; then
            echo "has_build=true" >> $GITHUB_OUTPUT
          else
            echo "has_build=false" >> $GITHUB_OUTPUT
          fi

      - name: 📦 Setup Node.js
        if: steps.check-build.outputs.has_build == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        if: steps.check-build.outputs.has_build == 'true'
        run: npm ci

      - name: 🏗️ Build project
        if: steps.check-build.outputs.has_build == 'true'
        run: npm run build

  staging-deploy:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, build-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "::notice::Staging deployment would happen here"
          echo "Configure your deployment steps based on your infrastructure"

  production-ready:
    name: ✅ Production Ready Check
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, build-test]
    if: github.base_ref == 'main' || github.base_ref == 'production'
    
    steps:
      - name: ✅ Production readiness
        run: |
          echo "✅ All production checks passed!"
          echo "::notice::Ready for production deployment after manual approval"